namespace Compiladores20201ProjetoCSharp.Compilador
{
    public abstract class ParserConstants
    {

        public static int START_SYMBOL = 49;

        public static int FIRST_NON_TERMINAL = 49;
        public static int FIRST_SEMANTIC_ACTION = 91;

        public static int[][] PARSER_TABLE =
        {
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1,  3, -1,  3, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1,  4, -1, -1, -1, -1, -1, -1,  5,  5,  5, -1, -1, -1,  4, -1,  4, -1,  4, -1, -1, -1, -1, -1,  5,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 12, -1, -1 },
            new int[] { -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 15, 15, 15, 15 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, 20, 18, -1, -1, -1, -1, -1, 17, 21, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 27, 28, -1, 22, 23, 26, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 31, 32 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, 50, -1, 51, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 54, 54, 54, 54, 54, 54, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, 55, 56, -1, -1, -1, -1, -1, 57, -1, 57, 57, -1, -1, -1 },
            new int[] { -1, 58, 58, 58, 58, 58, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, 59, 59, 59, 60, 60, -1, -1, -1, -1, -1, 60, -1, 60, 60, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 66, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 61, 61, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, 64, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 69, 69, 69, 69, 69, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, 69, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, 72, 72, 72, 72, 72, -1, 70, 71, -1, -1, 72, -1, 72, 72, -1, -1, -1 },
            new int[] { -1, 73, 73, 73, 73, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 76, 76, 76, 76, 76, 76, -1, 76, 76, 74, 75, 76, -1, 76, 76, -1, -1, -1 },
            new int[] { -1, 77, 77, 77, 77, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 79, 79, 79, 79, 79, 79, -1, 79, 79, 79, 79, 79, 78, 79, 79, -1, -1, -1 },
            new int[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 81, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            new int[] { -1, 87, 88, 83, 84, 85, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, 90, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
        };

        public static int[][] PRODUCTIONS =
        {
            new int[] { 106,  50,  20,  51,  13, 107 },
            new int[] {  53 },
            new int[] {   0 },
            new int[] {  76,  44,  52 },
            new int[] {  51 },
            new int[] {   0 },
            new int[] {  10,  54 },
            new int[] {  56,  55 },
            new int[] {  54 },
            new int[] {   0 },
            new int[] {  58,  57,  44 },
            new int[] {  45,  60, 121, 122 },
            new int[] {  46,  61, 127, 128 },
            new int[] {   4, 123,  59 },
            new int[] {  42,  58 },
            new int[] {   0 },
            new int[] {  18 },
            new int[] {  15 },
            new int[] {   9 },
            new int[] {  22 },
            new int[] {   8 },
            new int[] {  16 },
            new int[] {   5 },
            new int[] {   6 },
            new int[] {  26 },
            new int[] {  14 },
            new int[] {   7 },
            new int[] {   2 },
            new int[] {   3 },
            new int[] {  58,  63, 129,  77, 125 },
            new int[] {  46 },
            new int[] {  47 },
            new int[] {  48 },
            new int[] {  19,  29,  58, 126,  30 },
            new int[] {  21,  29,  66,  30 },
            new int[] {  77, 105,  67 },
            new int[] {  42,  66 },
            new int[] {   0 },
            new int[] {  17,  77, 130,  45,  51,  69,  73,  13, 131 },
            new int[] {  70 },
            new int[] {   0 },
            new int[] {  72,  71 },
            new int[] {  70 },
            new int[] {   0 },
            new int[] { 132,  11,  77, 133,  45,  51 },
            new int[] {  74 },
            new int[] {   0 },
            new int[] { 134,  12,  51 },
            new int[] { 135,  28,  51,  27,  45,  77, 136,  13 },
            new int[] {  62 },
            new int[] {  64 },
            new int[] {  65 },
            new int[] {  68 },
            new int[] {  75 },
            new int[] {  82,  78 },
            new int[] {  35,  82, 108,  78 },
            new int[] {  36,  82, 109,  78 },
            new int[] {   0 },
            new int[] {  83,  80 },
            new int[] {  81, 100,  83, 101 },
            new int[] {   0 },
            new int[] {  79 },
            new int[] {  26, 102 },
            new int[] {  14, 103 },
            new int[] {  37,  82, 104 },
            new int[] {  31 },
            new int[] {  32 },
            new int[] {  33 },
            new int[] {  34 },
            new int[] {  85,  84 },
            new int[] {  38,  85,  92,  84 },
            new int[] {  39,  85,  93,  84 },
            new int[] {   0 },
            new int[] {  87,  86 },
            new int[] {  40,  87,  94,  86 },
            new int[] {  41,  87,  95,  86 },
            new int[] {   0 },
            new int[] {  90,  88 },
            new int[] {  43,  89 },
            new int[] {   0 },
            new int[] {  23, 113 },
            new int[] {  24, 114 },
            new int[] {  25, 115 },
            new int[] {   4, 124 },
            new int[] {   5,  96 },
            new int[] {   6,  97 },
            new int[] {   7, 110 },
            new int[] {   2, 111 },
            new int[] {   3, 112 },
            new int[] {  29,  77,  30 },
            new int[] {  38,  90,  98 },
            new int[] {  39,  90,  99 }
        };

        public static string[] PARSER_ERROR =
        {
        "",
        "Encontrado {0} esperado EOF", //"Era esperado fim de programa",
        "Encontrado {0} esperada constante binario", //"Era esperado binario",
        "Encontrado {0} esperada constante hexadecimal", //"Era esperado hexadecimal",
        "Encontrado {0} esperado identificador", //"Era esperado identificador",
        "Encontrado {0} esperada constante inteira", //"Era esperado inteira",
        "Encontrado {0} esperada constante real", //"Era esperado real",
        "Encontrado {0} esperada constante string", //"Era esperado string",
        "Encontrado {0} esperado tipo", //"Era esperado bin",
        "Encontrado {0} esperado tipo", //"Era esperado bool",
        "Encontrado {0} esperado def", //"Era esperado def",
        "Encontrado {0} esperado elif", //"Era esperado elif",
        "Encontrado {0} esperado else", //"Era esperado else",
        "Encontrado {0} esperado end", //"Era esperado end",
        "Encontrado {0} esperado false", //"Era esperado false",
        "Encontrado {0} esperado tipo", //"Era esperado float",
        "Encontrado {0} esperado tipo", //"Era esperado hexa",
        "Encontrado {0} esperado if", //"Era esperado if",
        "Encontrado {0} esperado int", //"Era esperado int",
        "Encontrado {0} esperado listen", //"Era esperado listen",
        "Encontrado {0} esperado main", //"Era esperado main",
        "Encontrado {0} esperado speak", //"Era esperado speak",
        "Encontrado {0} esperado str", //"Era esperado str",
        "Encontrado {0} esperado toInt", //"Era esperado toInt",
        "Encontrado {0} esperado toBin", //"Era esperado toBin",
        "Encontrado {0} esperado toHexa", //"Era esperado toHexa",
        "Encontrado {0} esperado true", //"Era esperado true",
        "Encontrado {0} esperado whileFalse", //"Era esperado whileFalse",
        "Encontrado {0} esperado do", //"Era esperado do",
        "Encontrado {0} esperado (", //"Era esperado \"(\"",
        "Encontrado {0} esperado )", //"Era esperado \")\"",
        "Encontrado {0} esperado ==", //"Era esperado \"==\"",
        "Encontrado {0} esperado !=", //"Era esperado \"!=\"",
        "Encontrado {0} esperado <", //"Era esperado \"<\"",
        "Encontrado {0} esperado >", //"Era esperado \">\"",
        "Encontrado {0} esperado &", //"Era esperado \"&\"",
        "Encontrado {0} esperado |", //"Era esperado \"|\"",
        "Encontrado {0} esperado !", //"Era esperado \"!\"",
        "Encontrado {0} esperado +", //"Era esperado \"+\"",
        "Encontrado {0} esperado -", //"Era esperado \"-\"",
        "Encontrado {0} esperado *", //"Era esperado \"*\"",
        "Encontrado {0} esperado /", //"Era esperado \"/\"",
        "Encontrado {0} esperado ,", //"Era esperado \",\"",
        "Encontrado {0} esperado .", //"Era esperado \".\"",
        "Encontrado {0} esperado ;", //"Era esperado \";\"",
        "Encontrado {0} esperado :", //"Era esperado \":\"",
        "Encontrado {0} esperado operador de atribuição", //"Era esperado \"=\"",
        "Encontrado {0} esperado operador de atribuição", //"Era esperado \"+=\"",
        "Encontrado {0} esperado operador de atribuição", //"Era esperado \"-=\"",
        "Encontrado {0} esperado def main", //"<programa> inválido",
        "Encontrado {0} esperado def main", //"<opt_declaracao> inválido",
        "Encontrado {0} esperado identificador if listen speak do", //"<lista_comando> inválido",
        "Encontrado {0} esperado if elif else end listen speak do whileFalse", //"<lista_comando_1> inválido",
        "Encontrado {0} esperado def", //"<declaracao> inválido",
        "Encontrado {0} esperado identificador", //"<declaracao_variaveis> inválido",
        "Encontrado {0} esperado identificador main", //"<declaracao_variaveis_1> inválido",
        "Encontrado {0} esperado identificador", //"<variavel> inválido",
        "Encontrado {0} esperado : =", //"<variavel_1> inválido",
        "Encontrado {0} esperado identificador", //"<lista_id> inválido",
        "Encontrado {0} esperado ) , : operador de atribuição", //"<lista_id_1> inválido",
        "Encontrado {0} esperado tipo", //"<tipo> inválido",
        "Encontrado {0} esperada uma constante", //"<valor> inválido",
        "Encontrado {0} esperado identificador", //"<atribuicao> inválido",
        "Encontrado {0} esperado operador atribuicao", //"<forma_atribuicao> inválido",
        "Encontrado {0} esperado listen", //"<entrada> inválido",
        "Encontrado {0} esperado speak", //"<saida> inválido",
        "Encontrado {0} esperada uma expressão", //"<lista_expressao> inválido",
        "Encontrado {0} esperado , )", //"<lista_expressao_1> inválido",
        "Encontrado {0} esperado if ", //"<selecao> inválido",
        "Encontrado {0} esperado elif else end", //"<opt_elif> inválido",
        "Encontrado {0} esperado elif", //"<lista_elif> inválido",
        "Encontrado {0} esperado elif else end", //"<lista_elif_1> inválido",
        "Encontrado {0} esperado elif", //"<elif> inválido",
        "Encontrado {0} esperado else end", //"<opt_else> inválido",
        "Encontrado {0} esperado else", //"<else> inválido",
        "Encontrado {0} esperado do", //"<repeticao> inválido",
        "Encontrado {0} esperado identificador if listen speak do", //"<comando> inválido",
        "Encontrado {0} esperada uma expressão", //"<expressao> inválido",
        "Encontrado {0} esperada uma expressão", //"<expressao_1> inválido",
        "Encontrado {0} esperada uma expressão", //"<relacional> inválido",
        "Encontrado {0} esperada uma expressão", //"<relacional_1> inválido",
        "Encontrado {0} esperada uma expressão", //"<operador_relacional> inválido",
        "Encontrado {0} esperada uma expressão", //"<elemento> inválido",
        "Encontrado {0} esperada uma expressão", //"<aritmetica> inválido",
        "Encontrado {0} esperada uma expressão", //"<aritmetica_1> inválido",
        "Encontrado {0} esperada uma expressão", //"<termo> inválido",
        "Encontrado {0} esperada uma expressão", //"<termo_1> inválido",
        "Encontrado {0} esperada uma expressão", //"<fator> inválido",
        "Encontrado {0} esperada uma expressão", //"<fator_1> inválido",
        "Encontrado {0} esperada toInt toBin toHexa", //"<fator_2> inválido",
        "Encontrado {0} esperada uma expressão", //"<membro> inválido"
    };
    }
}