#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Hardcode
Input = Stream
Parser = LL
#RegularDefinitions
letra: [a-zA-Z]
dig: [0-9]
char: [0-9a-zA-Z]
dig_nao_zero: [1-9]
int: 0 | ({dig_nao_zero} {dig}*)

comentario_linha: "--" [^\n]*
comentario_bloco: "-*" ([^$] | "\$")* $
#Tokens

binario: #[bB] [0-1]+
hexadecimal: #[xX] ({dig} | [a-f])+
identificador: {letra} ( (({char} _) | {char})* | ((_ {char} | {char})* _?) )
inteira: {int}
real: {int}"."(0 | ({dig}* {dig_nao_zero}))
string: \"([^\"\n\\])*\"

//palavras reservadas
bin = identificador: "bin"
bool = identificador: "bool"
def = identificador: "def"
elif = identificador: "elif"
else = identificador: "else"
end = identificador: "end"
false = identificador: "false"
float = identificador: "float"
hexa = identificador: "hexa"
if = identificador: "if"
int = identificador: "int"
listen = identificador: "listen"
main = identificador: "main"
speak = identificador: "speak"
str = identificador: "str"
toInt = identificador: "toInt"
toBin = identificador: "toBin"
toHexa = identificador: "toHexa"
true = identificador: "true"
whileFalse = identificador: "whileFalse"
do = identificador: "do"

//simbolos especiais
"("
")"
"=="
"!="
"<"
">"
"&"
"|"
"!"
"+"
"-"
"*"
"/"
","
"."
";"
":"
"="
"+="
"-="

//caracteres de formaчуo reconhecidos e ignorados
:[\s\t\n]
:! {comentario_linha}
:! {comentario_bloco}

#NonTerminals
<programa>
<opt_declaracao>
<lista_comando>
<lista_comando_1>
<declaracao>
<declaracao_variaveis>
<declaracao_variaveis_1>
<variavel>
<variavel_1>
<lista_id>
<lista_id_1>
<tipo>
<valor>
<atribuicao>
<forma_atribuicao>
<entrada>
<saida>
<lista_expressao>
<lista_expressao_1>
<selecao>
<opt_elif>
<lista_elif>
<lista_elif_1>
<elif>
<opt_else>
<else>
<repeticao>
<comando>

<expressao>
<expressao_1>
<relacional>
<relacional_1>
<operador_relacional>
<elemento>
<aritmetica>
<aritmetica_1>
<termo>
<termo_1>
<fator>
<fator_1>
<fator_2>
<membro>
#Grammar
<programa> ::= <opt_declaracao> main <lista_comando> end ;
<opt_declaracao> ::= <declaracao> | ю ;
<lista_comando> ::= <comando>";" <lista_comando_1> ;
<lista_comando_1> ::= <lista_comando> | ю ;
<declaracao> ::= def <declaracao_variaveis> ;
<declaracao_variaveis> ::= <variavel> <declaracao_variaveis_1> ;
<declaracao_variaveis_1> ::= <declaracao_variaveis> | ю ;
<variavel> ::= <lista_id> <variavel_1> ";" ;
<variavel_1> ::= ":" <tipo> |"=" <valor> ;
<lista_id> ::= identificador <lista_id_1> ;
<lista_id_1> ::= ","<lista_id> | ю ;
<tipo> ::= int | float | bool | str | bin | hexa ;
<valor> ::= inteira | real | true | false | string | binario | hexadecimal ;
<atribuicao> ::= <lista_id> <forma_atribuicao> <expressao> ;
<forma_atribuicao> ::= "=" | "+=" | "-=" ;
<entrada> ::= listen "(" <lista_id> ")" ;
<saida> ::= speak "(" <lista_expressao> ")" ;
<lista_expressao> ::= <expressao> <lista_expressao_1> ;
<lista_expressao_1> ::= "," <lista_expressao> | ю ;
<selecao> ::= if <expressao> ":" <lista_comando> <opt_elif> <opt_else> end ;
<opt_elif> ::=  <lista_elif> | ю ;
<lista_elif> ::= <elif> <lista_elif_1> ;
<lista_elif_1> ::= <lista_elif> | ю ;
<elif> ::= elif <expressao> ":" <lista_comando> ;
<opt_else> ::= <else> | ю ;
<else> ::= else <lista_comando> ;
<repeticao> ::=  do <lista_comando> whileFalse ":" <expressao> end ;
<comando> ::= <atribuicao> | <entrada> | <saida> | <selecao> | <repeticao> ;

<expressao> ::= <elemento> <expressao_1>;
<expressao_1> ::= "&" <elemento> <expressao_1> | "|" <elemento> <expressao_1> | ю ;
<relacional> ::= <aritmetica> <relacional_1> ;
<relacional_1> ::= <operador_relacional> <aritmetica> | ю ;
<elemento> ::= <relacional> | true | false | "!" <elemento> ;
<operador_relacional> ::= "==" | "!=" | "<" | ">" ;
<aritmetica> ::= <termo> <aritmetica_1> ;
<aritmetica_1> ::= "+" <termo> <aritmetica_1> | "-" <termo> <aritmetica_1> | ю ;
<termo> ::= <fator> <termo_1> ;
<termo_1> ::= "*" <fator> <termo_1> | "/" <fator> <termo_1> | ю ;
<fator> ::= <membro> <fator_1> ;
<fator_1> ::= "." <fator_2> | ю ;
<fator_2> ::= toInt | toBin | toHexa  ;
<membro> ::= identificador |
inteira |
real |
string |
binario |
hexadecimal |
"(" <expressao> ")" |
"+" <membro> |
"-" <membro>;
